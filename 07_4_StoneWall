import java.util.*;

class Solution {
    public int solution(int[] H) {
        if(H.length == 0) return 0;

        int noBlocks = 1;
        Stack<Integer> recentHeights = new Stack<>();
        recentHeights.add(H[0]);
        for(int i = 1; i < H.length; ++i){
            // use the same block
            if(H[i] == recentHeights.peek()){
                    continue;
            }
            // we add a new block on top of the previous one
            if(H[i] > recentHeights.peek()){
                recentHeights.add(H[i]);
                ++noBlocks;
            }else{ // check if we can use any of the previous blocks
                while( (! recentHeights.isEmpty())){
                    if(recentHeights.peek() == H[i]){
                        break;
                    }else if(recentHeights.peek() > H[i]) {
                        recentHeights.pop();
                    }else{
                        ++noBlocks;
                        recentHeights.add(H[i]);
                        break;
                    }
                }
                if(recentHeights.isEmpty()){
                    ++noBlocks;
                    recentHeights.add(H[i]);
                }
            }
        }
        return noBlocks;
    }
}
